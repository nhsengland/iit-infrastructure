#!/usr/bin/env python

import glob
import os
import shutil
import socket
import subprocess
from datetime import datetime

import requests
import upload


def send_email(subject, text):
    return requests.post(
        '{{ SUPPORT_EMAIL_END_POINT }}',
        auth=('api', '{{ SUPPORT_EMAIL_API_KEY }}'),
        data={
            'from': '{{ SUPPORT_EMAIL_FROM }}',
            'to': ['{{ SUPPORT_EMAIL_TO }}'],
            'subject': subject,
            'text': text
        }
    )


def dump_database(backup_dir, database):
    print('Dumping database: {}'.format(database))
    target = os.path.join(backup_dir, '{}.dump'.format(database))
    command = 'sudo -u postgres pg_dump --format=custom {}'.format(database)
    print('Running: {}'.format(command))
    with open(target, 'wb') as out:
        subprocess.Popen(command, stdout=out, shell=True)

    if not os.path.exists(target):
        raise Exception('Database dump not saved for: {}'.format(database))


def backup():
    user_home = os.path.expanduser('~')
    hostname = socket.gethostname()
    date = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    file_name = '{}-{}.tgz'.format(date, hostname)
    backup_dir = os.path.join(user_home, 'backup')
    backup_target = os.path.join(user_home, file_name)

    if os.path.exists(backup_dir):
        shutil.rmtree(backup_dir)
    os.makedirs(backup_dir)
    print('Created {}'.format(backup_dir))

    for f in glob.iglob(os.path.join(user_home, '*.tgz')):
        os.remove(f)
    print('Removed tarballs')

    dump_database(backup_dir, 'ckan_default')
    dump_database(backup_dir, 'datastore_default')

    shutil.copytree('/var/lib/ckan/default', os.path.join(backup_dir, 'default'))

    print('Building tarball')
    subprocess.check_call('tar czf {} --directory={} .'.format(backup_target, backup_dir), shell=True)

    print('Uploading tarball')
    upload.upload(backup_target)

    shutil.rmtree(os.path.join(backup_dir, 'default'))


if __name__ == '__main__':
    try:
        backup()
    except Exception as e:
        print('errored with {}'.format(str(e)))
        send_email('Issue with the nhs england back up', str(e))
